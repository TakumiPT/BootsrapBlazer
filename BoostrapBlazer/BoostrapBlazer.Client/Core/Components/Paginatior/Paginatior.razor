@namespace Core
@inherits ComponentBase


<nav class="pagination justify-content-center">
    <ul class="pagination" id="@ElementId" role="button">
        <li class="page-item @(isFirstPage() || empty() ? "disabled" : "")">
            <button class="page-link" @onclick:preventDefault="true" @onclick="() => changePageToFirst()" disabled="@(isFirstPage() || empty())">
                <i class="bi bi-chevron-double-left"></i>
            </button>
        </li>
        <li class="page-item @(isFirstPage() || empty() ? "disabled" : "")">
            <button type="button" class="page-link" @onclick:preventDefault="true" @onclick="() => changePageToPrev()" disabled="@(isFirstPage() || empty())">
                <i class="bi bi-chevron-left"></i>
            </button>
        </li>
        @if (ShowPageLinks)
        {
            @foreach (var pageLink in @pageLinks)
            {
                <li class="page-item @(pageLink - 1 == getPage() ? "active" : "")">
                    <button type="button" class="page-link" @onclick:preventDefault="true" @onclick="() => onPageLinkClick(pageLink - 1)">@pageLink</button>
                </li>
            }
        }
        <li class="page-item @(isLastPage() || empty() ? "disabled" : "")">
            <button type="button" class="page-link" @onclick:preventDefault="true" @onclick="() => changePageToNext()" disabled="@(isLastPage() || empty())">
                <i class="bi bi-chevron-right"></i>
            </button>
        </li>
        <li class="page-item @(isLastPage() || empty() ? "disabled" : "")">
            <button type="button" class="page-link" @onclick:preventDefault="true" @onclick="() => changePageToLast()" disabled="@(isLastPage() || empty())">
                <i class="bi bi-chevron-double-right"></i>
            </button>
        </li>
    </ul>
</nav>

@code {

    [Parameter]
    public string? ElementId { get; set; }


    /// <summary>
    /// Number of total records
    /// </summary>
    [Parameter]
    public int TotalRecords { get; set; } = 0;

    /// <summary>
    /// Data count to display per page.
    /// </summary>
    [Parameter]
    public int Rows { get; set; } = 0;

    /// <summary>
    /// This event fires immediately when the page number is changed.
    /// </summary>
    [Parameter]
    public EventCallback<PaginatorState> OnPageChange { get; set; }


    /// <summary>
    /// Whether to show page links.
    /// </summary>
    [Parameter]
    public bool ShowPageLinks { get; set; } = true;

    /// <summary>
    /// Number of page links to display.
    /// </summary>
    [Parameter]
    public int PageLinkSize { get; set; } = 5;

    private List<int> pageLinks { get; set; } = null!;

    /// <summary>
    /// Zero-relative number of the first row to be displayed.
    /// </summary>
    [Parameter]
    public int First { get; set; } = 0;

    private object paginatorState = null!;


    protected override void OnInitialized()
    {
        this.updatePaginatorState();

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        this.updatePageLinks();
    }

    private int[] calculatePageLinkBoundaries()
    {
        // Assuming member variables exist
        int currentPage = this.getPage();
        int pageCount = this.getPageCount();
        int pageLinkSize = this.PageLinkSize;

        // Calculate the number of visible pages
        int visiblePages = Math.Min(pageLinkSize, pageCount);

        // Calculate the starting and ending page indices
        int start = Math.Max(0, (int)Math.Ceiling((double)(currentPage - visiblePages / 2)));
        int end = Math.Min(pageCount - 1, start + visiblePages - 1);

        // Adjust boundaries if approaching the last page
        int delta = pageLinkSize - (end - start + 1);
        start = Math.Max(0, start - delta);

        return new int[] { start, end };
    }

    private int getPageCount()
    {
        // Handle potential division by zero
        if (this.Rows == 0)
        {
            return 0; // Return 0 pages if rows per page is zero
        }

        // Calculate page count using ceiling for proper rounding
        return (int)Math.Ceiling((double)this.TotalRecords / this.Rows);
    }

    public void updatePageLinks()
    {

        // Clear existing page links
        this.pageLinks = new List<int>();

        // Calculate visible page link boundaries
        int[] boundaries = calculatePageLinkBoundaries();
        int start = boundaries[0];
        int end = boundaries[1];

        // Populate page links (1-based indexing)
        for (int i = start; i <= end; i++)
        {
            this.pageLinks.Add(i + 1);
        }
    }

    private int getCurrentPage()
    {
        if (getPageCount() > 0)
        {
            return getPage() + 1;
        }
        else
        {
            return 0;
        }
    }

    private bool empty()
    {
        return getPageCount() == 0;
    }

    private int getPage()
    {
        // Handle potential division by zero
        if (this.Rows == 0)
        {
            return 0; // Return 0 if rows per page is zero
        }

        // Calculate page index using floor for 0-based indexing
        return (int)Math.Floor((double)this.First / this.Rows);
    }

    private bool isFirstPage()
    {
        return this.getPage() == 0;
    }

    private void updatePaginatorState()
    {
        this.paginatorState = new {
            Page = getPage(),
            PageCount = getPageCount(),
            Rows = this.Rows,
            First = this.First,
            TotalRecords = this.TotalRecords
        };
    }



    private void changePage(int page)
    {
        int pageCount = getPageCount();

        if (page >= 0 && page < pageCount)
        {
            this.First = this.Rows * page;
            var state = new PaginatorState
                {
                    Page = page,
                    First = this.Rows * page,
                    Rows = this.Rows,
                    PageCount = pageCount,
                };
            updatePageLinks();

            OnPageChange.InvokeAsync(state);
            updatePaginatorState();
        }
    }


    private void onPageLinkClick(int page)
    {
        this.changePage(page);
    }

    private void changePageToPrev()
    {
        this.changePage(this.getPage() - 1);
    }

    private void changePageToFirst() {
        if (!this.isFirstPage())
        {
            this.changePage(0);
        }
    }

    private bool isLastPage()
    {
        return this.getPage() == this.getPageCount() - 1;
    }

    private void changePageToNext() {
        this.changePage(this.getPage() + 1);
    }


    private void changePageToLast() {
        if (!this.isLastPage())
        {
            this.changePage(this.getPageCount() - 1);
        }
    }

     
}
