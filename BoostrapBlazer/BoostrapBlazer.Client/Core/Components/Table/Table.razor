@namespace Core
@inherits ComponentBase

@typeparam TItem

@* Table only has code for lazy load *@

<div class="table-wrapper @(Loading? "position-relative" : "")">

	@if (TemplateCaption != null)
	{
		<div>
			@TemplateCaption
		</div>

	}

	<div class="@responsive ">
		<table class="table @striped @bordered @rowHover @tableStyleClass">
			<thead class="@headColor">
				@if (TemplateHeader != null)
				{
					@TemplateHeader(Columns)
				}
			</thead>
			<tbody>
				@if (TemplateEmptyMessage != null && isEmpty())
				{
					@TemplateEmptyMessage(Columns)
				}
				else
				{
					@if (TemplateBody != null)
					{
						@foreach (var rowData in Value)
						{
							var currentRowData = rowData;
							@TemplateBody((Columns, currentRowData))
						}
					}

				}


			</tbody>
			<tfoot>
				@if (TemplateFooter != null)
				{
					@TemplateFooter
				}
			</tfoot>
		</table>

	</div>


	@if (Paginator)
	{

		<Paginatior TotalRecords="@TotalRecords" Rows="@Rows" First="@First" RowsPerPageOptions="@RowsPerPageOptions" ShowPageLinks="@ShowPageLinks" PageLinkSize="@PageLinks" OnPageChange="OnPageChange" />
	}

	@if (Loading)
	{
		<div class="d-flex justify-content-center align-items-center position-absolute top-0 w-100 h-100">
			<div class="spinner-border z-3" style="width: 4rem; height: 4rem;" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
			<div class="position-absolute bg-body-tertiary z-2 opacity-75 top-0 w-100 h-100 pe-none" @onkeydown:preventDefault @onkeydown:stopPropagation @onclick:preventDefault @onclick:stopPropagation></div>
		</div>
	}
</div>

@code {
	/// <summary>
	/// Define the bg color of the Header.
	/// </summary>
	[Parameter]
	public Colors HeadColor { get; set; } = Colors.None;

	private string headColor => HeadColor != Colors.None ? "table-" + HeadColor.ToColorsName() : "";

	/// <summary>
	/// Define if the table has striped rows or columns or none.
	/// </summary>
	[Parameter]
	public TableStriped Striped { get; set; } = TableStriped.None;

	private string striped => Striped.ToTableStripedNameCssClass();

	/// <summary>
	/// Define if the table is bordered.
	/// </summary>
	[Parameter]
	public bool Bordered { get; set; } = false;

	private string bordered => Bordered ? "table-bordered" : "";

	/// <summary>
	/// When specified as true, enables the pagination.
	/// </summary>
	[Parameter]
	public bool Paginator { get; set; } = false;

	/// <summary>
	/// Whether to show page links.
	/// </summary>
	[Parameter]
	public bool ShowPageLinks { get; set; } = true;


	/// <summary>
	/// Number of page links to display in paginator.
	/// </summary>
	[Parameter]
	public int PageLinks { get; set; } = 5;

	/// <summary>
	/// Number of rows to display per page.
	/// </summary>
	[Parameter]
	public int Rows { get; set; }

	/// <summary>
	/// List of integer values to display inside rows per page dropdown of paginator
	/// </summary>
	[Parameter]
	public List<SelectItem>? RowsPerPageOptions { get; set; }

	/// <summary>
	/// Number of total records, defaults to length of value when not defined.
	/// </summary>
	[Parameter]
	public int TotalRecords { get; set; } = 0;


	/// <summary>
	/// Index of the first row to be displayed.
	/// </summary>
	[Parameter]
	public int First { get; set; } = 0;

	/// <summary>
	/// A list of objects to display..
	/// </summary>
	[Parameter]
	public List<TItem> Value { get; set; } = default!;

	/// <summary>
	/// A list of objects to represent dynamic columns.
	/// </summary>
	[Parameter]
	public List<IColumns> Columns { get; set; } = default!;

	/// <summary>
	/// Displays a loader to indicate data load is in progress.
	/// </summary>
	[Parameter]
	public bool Loading { get; set; } = false;





	/// <summary>
	/// Defines if the table is responsive.
	/// </summary>
	[Parameter]
	public TableResponsive Responsive { get; set; } = TableResponsive.None;

	private string responsive => Responsive.ToTableResponsiveNameCssClass();
	/// <summary>
	/// Style class of the table.
	/// </summary>
	[Parameter]
	public string TableStyleClass { get; set; } = default!;

	private string tableStyleClass => TableStyleClass;


	/// <summary>
	/// Adds hover effect to rows.
	/// </summary>
	[Parameter]
	public bool RowHover { get; set; } = false;

	private string rowHover => RowHover ? "table-hover" : "";


	/// <summary>
	/// Defines if data is loaded and interacted with in lazy manner.
	/// </summary>
	[Parameter]
	public bool Lazy { get; set; } = false;

	/// <summary>
	/// Custom caption template.
	/// </summary>
	[Parameter]
	public RenderFragment TemplateCaption { get; set; } = default!;

	/// <summary>
	/// Custom footer template.
	/// </summary>
	[Parameter]
	public RenderFragment TemplateFooter { get; set; } = default!;

	/// <summary>
	/// Custom grouped header template.
	/// </summary>
	[Parameter]
	public RenderFragment<List<IColumns>> TemplateHeader { get; set; } = default!;

	/// <summary>
	/// Custom body template.
	/// </summary>
	[Parameter]
	public RenderFragment<(List<IColumns> Columns, TItem Rowdata)> TemplateBody { get; set; } = default!;


	/// <summary>
	/// Custom empty message template.
	/// </summary>
	[Parameter]
	public RenderFragment<List<IColumns>> TemplateEmptyMessage { get; set; } = default!;


	/// <summary>
	/// Callback to invoke when paging, sorting or filtering happens in lazy mode.
	/// </summary>
	[Parameter]
	public EventCallback<TableLazyLoadEvent> OnLazyLoad { get; set; }


	private int currentPage = 1;

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}


	private bool isEmpty()
	{
		var data = this.Value;
		return data == null || data.Count == 0;
	}


	private async void OnPageChange(PaginatorState paginatorState)
	{
		if (this.Lazy)
		{
			var lazyEvent = new TableLazyLoadEvent
				{
					First = paginatorState.First,
					Rows = paginatorState.Rows,
				};
			await this.OnLazyLoad.InvokeAsync(lazyEvent);
		}
	}


}
