@page "/tables"
@using Core
@rendermode InteractiveServer


<Table Value="results"
	   Columns="ColumnsData"
	   Rows="rows"
	   Paginator="true"
	   Bordered="true"
	   HeadColor="Colors.Light"
	   Responsive="TableResponsive.MD"
	   RowsPerPageOptions="rowsPerPageOptions"
	   TotalRecords="totalRecords"
	   First="first"
	   Lazy="true"
	   OnLazyLoad="OnLazyLoad"
	   Loading="isLoading">
	<TemplateHeader>

		<tr>

			@foreach (var col in @context)
			{
				<th scope="col">@col.Header</th>
			}

		</tr>
	</TemplateHeader>

	<TemplateBody>
		<tr>
			@foreach (var col in @context.Columns)
			{
				var currentRowData = @context.Rowdata;
				<td>
					Hello
					@if (currentRowData.GetType().GetProperty(col.Header) != null)
					{
						@currentRowData.GetType().GetProperty(col.Header)?.GetValue(currentRowData)
					}
				</td>
			}
		</tr>
	</TemplateBody>
	<TemplateEmptyMessage>
		<tr>
			<td colspan="@context.Count" rowspan="2">
				<div class="d-flex justify-content-center align-items-center" style="min-height: 200px">
					<p>No products found.</p>

				</div>
			</td>
		</tr>
	</TemplateEmptyMessage>
</Table>

@code {

	// these values should be hardcoded or reset by the api response at first run
	private int first = 0;
	private int rows = 5;
	// this value should be set by api response
	private int totalRecords = 120;
	private List<Product>? results;


	private bool isLoading = false;

	private class Columns : IColumns
	{
		public required string Field { get; set; }
		public required string Header { get; set; }
	}

	private class Product
	{
		public string Id { get; set; }
		public string Code { get; set; }
		public string Name { get; set; }
		public string Description { get; set; }
		public string Image { get; set; }
		public decimal Price { get; set; }
		public string Category { get; set; }
		public int Quantity { get; set; }
		public string InventoryStatus { get; set; }
		public float Rating { get; set; }
	}

	private List<IColumns> ColumnsData = new List<IColumns>()
	{
		new Columns { Field = "Code", Header = "Code" },
		new Columns { Field = "Name", Header = "Name" },
		new Columns { Field = "Category", Header = "Category" },
		new Columns { Field = "Quantity", Header = "Quantity" }
	};


	private List<SelectItem> rowsPerPageOptions = new List<SelectItem>
	{
		new SelectItem
		{
			Label= "5 Publicações",
			Value = 5
		},
		new SelectItem
		{
			Label= "10 Publicações",
			Value = 10
		},
		new SelectItem
		{
			Label= "50 Publicações",
			Value = 50
		}
	};

	protected override void OnInitialized()
	{
		this.results = new List<Product>()
		{
	  new Product
	  {
		Id = "P1001",
		Code = "SAMPLE_CODE_01",
		Name = "Unique Product 1",
		Description = "This is a unique product description 1.",
		Image = "product_01.jpg",
		Price = 19.99m,
		Category = "Clothing",
		Quantity = 20,
		InventoryStatus = "INSTOCK",
		Rating = 4.5f
	  },
	  new Product
	  {
		Id = "P1002",
		Code = "SAMPLE_CODE_02",
		Name = "Unique Product 2",
		Description = "This is a unique product description 2.",
		Image = "product_02.jpg",
		Price = 49.95m,
		Category = "Electronics",
		Quantity = 100,
		InventoryStatus = "LOWSTOCK",
		Rating = 3.8f
	  },
	  new Product
	  {
		Id = "P1003",
		Code = "SAMPLE_CODE_03",
		Name = "Unique Product 3",
		Description = "This is a unique product description 3.",
		Image = "product_03.jpg",
		Price = 7.50m,
		Category = "Homeware",
		Quantity = 5,
		InventoryStatus = "OUTOFSTOCK",
		Rating = 5.0f
	  },
	  new Product
	  {
		Id = "P1004",
		Code = "SAMPLE_CODE_04",
		Name = "Unique Product 4",
		Description = "This is a unique product description 4.",
		Image = "product_04.jpg",
		Price = 34.99m,
		Category = "Sports",
		Quantity = 35,
		InventoryStatus = "INSTOCK",
		Rating = 4.2f
	  },
	  new Product
	  {
		Id = "P1005",
		Code = "SAMPLE_CODE_05",
		Name = "Unique Product 5",
		Description = "This is a unique product description 5.",
		Image = "product_05.jpg",
		Price = 12.99m,
		Category = "Books",
		Quantity = 8,
		InventoryStatus = "INSTOCK",
		Rating = 4.8f
	  },

  };
		base.OnInitialized();
	}

	async Task OnLazyLoad(TableLazyLoadEvent ev)
	{
		this.isLoading = true;
		try
		{
			// var response = await FetchDataFromApiAsync(ev.First, ev.Rows); // Replace with your API call
			// this.results = response.Data;
			// this.first = response.First;
			// this.rows = response.Rows;
			// this.totalRecords = response.TotalRecords;

			// Simulate API delay
			await Task.Delay(2000); // Replace with desired delay (milliseconds)
			this.first = ev.First;
			this.rows = ev.Rows;
			this.totalRecords = 120;
		}
		catch (Exception ex)
		{

			// Handle API errors gracefully
			Console.WriteLine(ex); // replace with toast
		}
		finally
		{
			this.isLoading = false;
		}
	}

}

